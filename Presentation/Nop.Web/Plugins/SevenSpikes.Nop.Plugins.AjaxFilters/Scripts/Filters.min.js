$(document).ready(function () { "function" !== typeof String.prototype.trim && (String.prototype.trim = function () { return this.replace(/^\s+|\s+$/g, "") }); var a = new FiltersManager; a.addProductPanelAjaxBusyToPage(); $(".nopAjaxFilters7Spikes .block .title a.toggleControl").on("click", function () { !0 == $(this).hasClass("closed") ? $(this).removeClass("closed") : $(this).addClass("closed"); $(this).parent().siblings(".filtersGroupPanel").slideToggle("slow", function () { $(this).css("overflow", "") }) }); $(".nopAjaxFilters7Spikes .block .title a.clearFilterOptions").each(function () { $(this).click({ filtersManager: a }, a.clearFilterOptions); $(this).hide() }); $(".nopAjaxFilters7Spikes .filtersDropDown a.allFilterDropDownOptions").each(function () { $(this).click({ filtersManager: a }, a.selectAllFilterDropDownOption) }); var b = $(".nopAjaxFilters7Spikes .filtersTitlePanel a.clearFilterOptionsAll"); b.click({ filtersManager: a }, a.clearAllFilterOptions); b.hide(); a.replaceSortAndViewOptionsDropDowns() }); function FiltersManager() { this.categoryId = $(".nopAjaxFilters7Spikes").attr("data-categoryId"); this.manufacturerId = $(".nopAjaxFilters7Spikes").attr("data-manufacturerId"); this.vendorId = $(".nopAjaxFilters7Spikes").attr("data-vendorId"); this.getFilteredProductsUrl = $(".nopAjaxFilters7Spikes").attr("data-getFilteredProductsUrl"); this.filtersUIMode = $(".nopAjaxFilters7Spikes").attr("data-filtersUIMode"); this.filtersUIModeEnum = { userCheckboxes: "usecheckboxes", useDropDowns: "usedropdowns" }; this.selectedFilterOptionElement = this.selectedFilterGroupElement = void 0; this.requestProductsForSelectedFilters = RequestProductsForSelectedFilters; this.getSpecificationFiltersModel = GetSpecificationFiltersModel; this.getAttributeFiltersModel = GetAttributeFiltersModel; this.getManufacturerFiltersModel = GetManufacturerFiltersModel; this.getVendorFiltersModel = GetVendorFiltersModel; this.getOnSaleFiltersModel = GetOnSaleFiltersModel; this.getPriceRangeFilterModel = GetPriceRangeFilterModel; this.refreshProducts = RefreshProducts; this.refreshProductsPager = RefreshProductsPager; this.replaceSortAndViewOptionsDropDowns = ReplaceSortAndViewOptionsDropDowns; this.setPagerLinks = SetPagerLinks; this.getProductsPanelSelector = GetProductsPanelSelector; this.getPagerPanelSelector = GetPagerPanelSelector; this.getSortOptionsDropDownSelector = GetSortOptionsDropDownSelector; this.getViewOptionsDropDownSelector = GetViewOptionsDropDownSelector; this.getProductsPageSizeDropDownSelector = GetProductsPageSizeDropDownSelector; this.sortProducts = SortProducts; this.changeViewMode = ChangeViewMode; this.changePageSize = ChangePageSize; this.clearFilterOptions = ClearFilterOptions; this.clearFilterOptionsForFiltersGroupElement = ClearFilterOptionsForFiltersGroupElement; this.selectAllFilterDropDownOption = SelectAllFilterDropDownOption; this.clearAllFilterOptions = ClearAllFilterOptions; this.refreshClearButtons = RefreshClearButtons; this.changeViewModeOrderByAndPageSize = ChangeViewModeOrderByAndPageSize; this.setPriceRangeValues = SetPriceRangeValues; this.refreshFilters = RefreshFilters; this.addProductPanelAjaxBusyToPage = function () { parentForAjaxBusyPanel = ".ajaxBusyPanelParent"; var a = $("#viewOptionsDropDown").attr("data-DropDownOptionsSelectedValue"); void 0 == a && (a = $(".nopAjaxFilters7Spikes").attr("data-defaultViewMode")); this.getProductsPanelSelector(a); a = $(".nopAjaxFilters7Spikes").attr("data-productsGridPanelSelector") + "," + $(".nopAjaxFilters7Spikes").attr("data-ProductsListPanelSelector"); a = $(a); 1 < a.length ? $(a[a.length - 1]).addClass("ajaxBusyPanelParent") : $(a).addClass("ajaxBusyPanelParent"); $(parentForAjaxBusyPanel).css("position", "relative"); $(parentForAjaxBusyPanel).append($('<div class="productPanelAjaxBusy"></div><div class="clear"></div>')); $(".productPanelAjaxBusy").hide() }; this.setSpecificationFilterSelection = function (a, b) { this.selectedFilterGroupElement = a; this.selectedFilterOptionElement = b }; this.determineIfRequestIsValidForControlState = function (a) { var b = !1; if (void 0 == a || "filterItemUnselected" == a.attr("class") || "filterItemSelected" == a.attr("class") && this.filtersUIMode == this.filtersUIModeEnum.userCheckboxes) b = !0; return b }; this.changeControlsState = function (a) { if (void 0 != a) { var b = a.attr("class"); "filterItemSelected" == b ? a.attr("class", "filterItemUnselected") : "filterItemUnselected" == b && a.attr("class", "filterItemSelected"); if (void 0 != this.selectedFilterGroupElement && this.filtersUIMode == this.filtersUIModeEnum.useDropDowns) { var c = this.selectedFilterOptionElement; this.selectedFilterGroupElement.find("a[data-option-id],[data-option-ids]").each(function (a, b) { "filterItemSelected" == $(b).attr("class") && b != c.get(0) && $(b).attr("class", "filterItemUnselected") }) } } }; this.showNoProductsModalDialog = function () { var a = $("#nopAjaxFiltersNoProductsDialog").data("kendoWindow"), b = $("#nopAjaxFiltersNoProductsDialog").attr("title"); b || (b = "NO RESULTS FOUND"); a || (a = $("#nopAjaxFiltersNoProductsDialog").kendoWindow({ draggable: !1, resizable: !1, width: "300px", height: "100px", title: b, modal: !0, actions: ["Close"], animation: !1, visible: !1 }).data("kendoWindow"), a.wrapper.addClass("ajaxFilters")); a.center(); a.open() }; this.showProductPanelAjaxBusy = function () { $(".productPanelAjaxBusy").show() }; this.hideProductPanelAjaxBusy = function () { $(".productPanelAjaxBusy").hide() } } FiltersManager.prototype.getFilterItemStateBasedOnItemClass = function (a, b) { var c = b; switch (a) { case "filterItemUnselected": c = "Unchecked"; break; case "filterItemSelected": c = "Checked"; break; case "filterItemSelectedDisabled": c = "CheckedDisabled"; break; case "filterItemDisabled": c = "Disabled" } return c }; FiltersManager.prototype.getFilterItemClassBasedOnState = function (a, b) { var c = b; switch (a) { case 0: c = "filterItemUnselected"; break; case 1: c = "filterItemSelected"; break; case 2: c = "filterItemSelectedDisabled"; break; case 3: c = "filterItemDisabled" } return c }; FiltersManager.waitForAjaxRequest = !1; function RequestProductsForSelectedFilters(a, b, c, d, e, f) { if (!FiltersManager.waitForAjaxRequest && "#/noFilterApplied" != d && this.determineIfRequestIsValidForControlState(b)) { void 0 == d ? d = "" : f = !0; this.setSpecificationFilterSelection(a, b); this.changeControlsState(b); a = this.getSpecificationFiltersModel(); b = this.getAttributeFiltersModel(); var g = this.getManufacturerFiltersModel(), l = this.getVendorFiltersModel(), m = this.getOnSaleFiltersModel(), n = this.getPriceRangeFilterModel(); void 0 == c && (c = null); var k = $("#sortOptionsDropDown").attr("data-DropDownOptionsSelectedValue"); void 0 == k && (k = null); var p = $("#viewOptionsDropDown").attr("data-DropDownOptionsSelectedValue"); void 0 == p && (p = null); var q = $("#productsPageSizeDropDown").attr("data-DropDownOptionsSelectedValue"); void 0 == q && (q = null); var r = $.getUrlVar("pagenumber"); void 0 == r || null != c || void 0 != e && !1 != e || (c = r); void 0 == f && (f = !1); c = { categoryId: this.categoryId, manufacturerId: this.manufacturerId, vendorId: this.vendorId, priceRangeFilterModel7Spikes: n, specificationFiltersModel7Spikes: a, attributeFiltersModel7Spikes: b, manufacturerFiltersModel7Spikes: g, vendorFiltersModel7Spikes: l, pageNumber: c, orderby: k, viewmode: p, pagesize: q, queryString: d, shouldNotStartFromFirstPage: f, onSaleFilterModel: m }; this.showProductPanelAjaxBusy(); var h = this; e = this.getFilteredProductsUrl; FiltersManager.waitForAjaxRequest = !0; $.ajax({ cache: !1, type: "POST", data: $.toJSON(c), contentType: "application/json; charset=utf-8", url: e, success: function (a) { "" != d && (h.changeViewModeOrderByAndPageSize(a), h.setPriceRangeValues(a)); if (h.refreshProducts(a)) { h.refreshFilters(a); h.refreshProductsPager(a); h.refreshClearButtons(); "NO HASH QUERY" != d && (a = $(a).filter("#urlHashQuery").val().toString(), "" != a ? $.address.value(a) : $.address.value("noFilterApplied")); h.hideProductPanelAjaxBusy(); FiltersManager.waitForAjaxRequest = !1; a = $(".nopAjaxFilters7Spikes").attr("data-scrollToElement"); if (void 0 != a && "true" == a.toLowerCase()) { a = $(".nopAjaxFilters7Spikes").attr("data-scrollToElementSelector").split(","); var b = ".product-selectors"; if (void 0 != a && 0 < a.length) { for (var c = 0; c < a.length; c++) if (0 < $(a[c].trim()).length) { b = a[c].trim(); break } 0 < $(b).length && $("html, body").animate({ scrollTop: $(b).offset().top }, "slow") } } 1 > $(".productPanelAjaxBusy").length && h.addProductPanelAjaxBusyToPage(); $.event.trigger({ type: "nopAjaxFiltersFiltrationCompleteEvent" }) } else h.changeControlsState(h.selectedFilterOptionElement), FiltersManager.waitForAjaxRequest = !1 }, error: function (a, b, c) { h.hideProductPanelAjaxBusy(); alert("Loading the page failed."); FiltersManager.waitForAjaxRequest = !1 } }) } } function RefreshFilters(a) { var b = $(a).filter("#specificationFilterModel7SpikesJson").val().toString(), b = $.parseJSON(b); void 0 != this.refreshSpecificationFilters && this.refreshSpecificationFilters(b, this.filtersUIMode); b = $(a).filter("#attributeFilterModel7SpikesJson").val().toString(); b = $.parseJSON(b); void 0 != this.refreshAttributeFilters && this.refreshAttributeFilters(b, this.filtersUIMode); b = $(a).filter("#manufacturerFilterModel7SpikesJson").val().toString(); b = $.parseJSON(b); void 0 != this.refreshManufacturerFilters && this.refreshManufacturerFilters(b, this.filtersUIMode); b = $(a).filter("#vendorFilterModel7SpikesJson").val().toString(); b = $.parseJSON(b); void 0 != this.refreshVendorFilters && this.refreshVendorFilters(b, this.filtersUIMode); a = $(a).filter("#onSaleFilterModel7SpikesJson").val().toString(); a = $.parseJSON(a); void 0 != this.refreshOnSaleFilters && this.refreshOnSaleFilters(a, this.filtersUIMode) } function SetPriceRangeValues(a) { var b = $(a).filter("#priceRangeFromJson").val().toString(), b = $.parseJSON(b); a = $(a).filter("#priceRangeToJson").val().toString(); a = $.parseJSON(a); void 0 != this.SetSliderValues && this.SetSliderValues(b, a) } function RequestProductsForPagerLink(a) { var b = $(a.currentTarget).attr("data-pageNumber"); null != a.data && void 0 != a.data.filtersManager && a.data.filtersManager.requestProductsForSelectedFilters(void 0, void 0, b, void 0, void 0, !0) } function GetSpecificationFiltersModel() { var a = null; void 0 != this.buildSpecificationFiltersModel && (a = this.buildSpecificationFiltersModel(this.categoryId, this.manufacturerId, this.vendorId, this.selectedFilterGroupElement)); return a } function GetAttributeFiltersModel() { var a = null; void 0 != this.buildAttributeFiltersModel && (a = this.buildAttributeFiltersModel(this.categoryId, this.manufacturerId, this.vendorId, this.selectedFilterGroupElement)); return a } function GetManufacturerFiltersModel() { var a = null; void 0 != this.buildManufacturerFiltersModel && (a = this.buildManufacturerFiltersModel(this.categoryId, this.selectedFilterGroupElement)); return a } function GetVendorFiltersModel() { var a = null; void 0 != this.buildVendorFiltersModel && (a = this.buildVendorFiltersModel(this.categoryId, this.selectedFilterGroupElement)); return a } function GetOnSaleFiltersModel() { var a = null; void 0 != this.buildOnSaleFiltersModel && (a = this.buildOnSaleFiltersModel(this.categoryId, this.manufacturerId, this.vendorId, this.selectedFilterGroupElement)); return a } function GetPriceRangeFilterModel() { var a = null; void 0 != this.buildPriceRangeFilterModel && (a = this.buildPriceRangeFilterModel(this.categoryId, this.manufacturerId, this.vendorId, this.selectedFilterGroupElement)); return a } function RefreshProducts(a) { var b = $("#viewOptionsDropDown").attr("data-DropDownOptionsSelectedValue"); void 0 == b && (b = $(".nopAjaxFilters7Spikes").attr("data-defaultViewMode")); var b = this.getProductsPanelSelector(b), c = $(".nopAjaxFilters7Spikes").attr("data-productsGridPanelSelector") + "," + $(".nopAjaxFilters7Spikes").attr("data-ProductsListPanelSelector"), c = $(c); null != $(a).filter(b).html() ? (1 < c.length ? $(c[c.length - 1]).replaceWith($(a).filter(b)) : c.replaceWith($(a).filter(b)), a = !0) : (this.hideProductPanelAjaxBusy(), 0 < $("#nopAjaxFiltersNoProductsDialog").length || c.prepend($(a).filter("#nopAjaxFiltersNoProductsDialog")), this.showNoProductsModalDialog(), a = !1); return a } function GetProductsPanelSelector(a) { "list" == a ? (a = $(".nopAjaxFilters7Spikes").attr("data-ProductsListPanelSelector"), a = void 0 != a ? a : ".product-list") : (a = $(".nopAjaxFilters7Spikes").attr("data-productsGridPanelSelector"), a = void 0 != a ? a : ".product-grid"); return a } function GetPagerPanelSelector() { var a = ".pager"; void 0 != a && (a = $(".nopAjaxFilters7Spikes").attr("data-pagerPanelSelector")); return a } function RefreshProductsPager(a) { var b = this.getPagerPanelSelector(), c = $(b); c.html($(a).filter(b).html()); this.setPagerLinks(c) } function SetPagerLinks(a) { var b = this; a.find("a").each(function () { var a = $(this).attr("href"), d = ""; void 0 != a && (a = a.toLowerCase(), a = /pagenumber=(\d+)/.exec(a), null != a && 1 < a.length && (d = a[1])); $(this).removeAttr("href"); $(this).attr("data-pageNumber", d); $(this).click({ filtersManager: b }, RequestProductsForPagerLink) }) } function GetSortOptionsDropDownSelector() { var a = $(".nopAjaxFilters7Spikes").attr("data-sortOptionsDropDownSelector"); "" == a && (a = "#products-orderby"); return a } function GetViewOptionsDropDownSelector() { var a = $(".nopAjaxFilters7Spikes").attr("data-viewOptionsDropDownSelector"); "" == a && (a = "#products-viewmode"); return a } function GetProductsPageSizeDropDownSelector() { var a = $(".nopAjaxFilters7Spikes").attr("data-productsPageSizeDropDownSelector"); "" == a && (a = "#products-pagesize"); return a } function ChangeViewModeOrderByAndPageSize(a) { var b = $(a).filter("#currentPageSizeJson").val().toString(), b = $.parseJSON(b), c = $(a).filter("#currentOrderByJson").val().toString(), c = $.parseJSON(c); a = $(a).filter("#currentViewModeJson").val().toString(); a = $.parseJSON(a); var d = $("#sortOptionsDropDown"), e = $("#viewOptionsDropDown"), f = $("#productsPageSizeDropDown"); if (0 != d.length || 0 != e.length || 0 != f.length) { var g = [], l = [], m = [], n = PopulateOptions(d, g, "#availableSortOptionsJson", c), k = PopulateOptions(e, l, "#availableViewModesJson", a), p = PopulateOptions(f, m, "#availablePageSizesJson", b); void 0 != b && SetSelectedElementByDropdownSelector(f, p, m); void 0 != c && SetSelectedElementByDropdownSelector(d, n, g); void 0 != a && SetSelectedElementByDropdownSelector(e, k, l) } } function SetSelectedElementByDropdownSelector(a, b, c) { var d = a.get(0), e = $(a.find("li")[b]); void 0 != e && void 0 != d && (d.selectedLiElement = e, d.par.text($(e).text()), a.attr("data-dropDownOptionsSelectedValue", c[b].dropDownOptionValue)) } function ReplaceSortAndViewOptionsDropDowns() { var a = this.getSortOptionsDropDownSelector(), b = $(a), a = this.getViewOptionsDropDownSelector(), c = $(a), a = this.getProductsPageSizeDropDownSelector(), d = $(a); if (0 != b.length || 0 != c.length || 0 != d.length) { var e = [], f = [], g = [], l = PopulateOptions(b, e, "#availableSortOptionsJson"), m = PopulateOptions(c, f, "#availableViewModesJson"), n = PopulateOptions(d, g, "#availablePageSizesJson"), k = nop_store_directory_root + "Plugins/SevenSpikes.Nop.Plugins.AjaxFilters/JQueryTemplates/JDropDown.htm"; $.ajax({ url: k, async: !1, success: function (a) { $.template("jDropDownTemplate", a); 0 < b.length && ($.tmpl("jDropDownTemplate", { jDropDownId: "sortOptionsDropDown", jDropDownCss: "sortOptionsDropDown", dropDownOptions: e }, { selectedOptionIndex: l, dropDownOptionClickCallback: "new FiltersManager().sortProducts" }).insertAfter(b), $("#sortOptionsDropDown").attr("data-dropDownOptionsSelectedValue", e[l].dropDownOptionValue), b.remove()); 0 < c.length && ($.tmpl("jDropDownTemplate", { jDropDownId: "viewOptionsDropDown", jDropDownCss: "viewOptionsDropDown", dropDownOptions: f }, { selectedOptionIndex: m, dropDownOptionClickCallback: "new FiltersManager().changeViewMode" }).insertAfter(c), $("#viewOptionsDropDown").attr("data-dropDownOptionsSelectedValue", f[selectedOptionIndex].dropDownOptionValue), c.remove()); 0 < d.length && ($.tmpl("jDropDownTemplate", { jDropDownId: "productsPageSizeDropDown", jDropDownCss: "productsPageSizeDropDown", dropDownOptions: g }, { selectedOptionIndex: n, dropDownOptionClickCallback: "new FiltersManager().changePageSize" }).insertAfter(d), $("#productsPageSizeDropDown").attr("data-dropDownOptionsSelectedValue", g[n].dropDownOptionValue), d.remove()) }, error: function (a, b, c) { alert("Retrieving " + k + " failed.") } }) } } function PopulateOptions(a, b, c, d) { var e = 0; 0 < a.length && (a = $(c).val().toString(), a = $.parseJSON(a), $.each(a, function (a, c) { b.push({ dropDownOptionName: c.Text, dropDownOptionValue: c.Value }); d ? c.Value == d && (e = a) : 0 == e && c.Selected && (e = a) })); return e } function SortProducts(a) { a = $(a.currentTarget).attr("data-DropDownOptionValue"); $("#sortOptionsDropDown").attr("data-DropDownOptionsSelectedValue", a); (new FiltersManager).requestProductsForSelectedFilters() } function ChangeViewMode(a) { a = $(a.currentTarget).attr("data-DropDownOptionValue"); $("#viewOptionsDropDown").attr("data-DropDownOptionsSelectedValue", a); (new FiltersManager).requestProductsForSelectedFilters(void 0, void 0, void 0, void 0, void 0, !0) } function ChangePageSize(a) { a = $(a.currentTarget).attr("data-DropDownOptionValue"); $("#productsPageSizeDropDown").attr("data-DropDownOptionsSelectedValue", a); (new FiltersManager).requestProductsForSelectedFilters() } function SelectAllFilterDropDownOption(a) { var b = $(a.currentTarget).parents(".filtersGroupPanel"); a.data.filtersManager.clearFilterOptionsForFiltersGroupElement(b) } function ClearFilterOptions(a) { var b = $(a.currentTarget).parent().siblings(".filtersGroupPanel"); a.data.filtersManager.clearFilterOptionsForFiltersGroupElement(b) } function ClearFilterOptionsForFiltersGroupElement(a) { $(a).find("a[data-option-id], a[data-optionsGroupId]").each(function (a, c) { "filterItemSelected" == $(c).attr("class") ? $(c).attr("class", "filterItemUnselected") : "filterItemSelectedDisabled" == $(c).attr("class") && $(c).attr("class", "filterItemDisabled") }); this.filtersUIMode == this.filtersUIModeEnum.useDropDowns && $(a).find(".filtersDropDown").jDropDown({ method: "reset" }); this.requestProductsForSelectedFilters(a, void 0) } function ClearAllFilterOptions(a) { $(".nopAjaxFilters7Spikes .filtersGroupPanel").each(function (a, c) { $(c).find("a[data-option-id], a[data-optionsGroupId]").each(function (a, b) { $(b).attr("class", "filterItemUnselected") }) }); a = a.data.filtersManager; a.filtersUIMode == a.filtersUIModeEnum.useDropDowns && $(".nopAjaxFilters7Spikes .filtersGroupPanel .filtersDropDown").jDropDown({ method: "reset" }); void 0 != a.clearPriceRangeFilterControl && a.clearPriceRangeFilterControl(); a.requestProductsForSelectedFilters() } function RefreshClearButtons() { var a = !1; $(".nopAjaxFilters7Spikes .filtersGroupPanel").each(function (b, c) { var f = !1; $(c).find("a[data-option-id], a[data-optionsGroupId]").each(function (a, b) { if ("filterItemSelected" == $(b).attr("class")) return f = !0, !1 }); var g = $(c).parent().find("a.clearFilterOptions"); f ? (g.show(), a = !0) : g.hide() }); var b = $(".nopAjaxFilters7Spikes .filtersTitlePanel a.clearFilterOptionsAll"); if (a) b.show(); else { var c = !1; void 0 != this.determineIfPriceRangeHasBeenSelected && (c = this.determineIfPriceRangeHasBeenSelected()); c ? b.show() : b.hide() } };